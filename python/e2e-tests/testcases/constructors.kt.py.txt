Test that multiple constructors in Kotlin code are compiled to Python and can be called properly.
--- Kotlin code ---
var s = "abc"

class MultiConstructors1(a: Int) {

    init {
        s += "|body 11"
    }

    constructor(b: String) : this(2) {
        s += "|body 12"
    }
}

fun multi11() {
    MultiConstructors1(1)
}

fun multi12() {
    MultiConstructors1("a")
}

class MultiConstructors2 {

    constructor(a: Int) {
        s += "|body 21"
    }

    constructor(b: String) {
        s += "|body 22"
    }
}

fun multi21() {
    MultiConstructors2(1)
}

fun multi22() {
    MultiConstructors2("a")
}

class MultiConstructors3 {

    constructor(a: Int) {
        s += "|body 31"
    }

    constructor(b: String) : this(3) {
        s += "|body 32"
    }

    constructor(b: Boolean) : this("c") {
        s += "|body 33"
    }
}

fun multi31() {
    MultiConstructors3(1)
}

fun multi32() {
    MultiConstructors3("a")
}

fun multi33() {
    MultiConstructors3(true)
}

abstract class BaseClass {

    constructor(i: Int) {
        s += "|body base"
    }
}

class ChildClass : BaseClass {

    constructor(a: Int) : super(4) {
        s += "|body child"
    }
}

fun child() {
    ChildClass(123)
}
--- Python consumer ---
from compiled import multi11, multi12, multi21, multi22, multi31, multi32, multi33, child
import compiled

compiled.s = "test11"
multi11()
print(compiled.s)
compiled.s = "test12"
multi12()
print(compiled.s)

compiled.s = "test21"
multi21()
print(compiled.s)
compiled.s = "test22"
multi22()
print(compiled.s)

compiled.s = "test31"
multi31()
print(compiled.s)
compiled.s = "test32"
multi32()
print(compiled.s)
compiled.s = "test33"
multi33()
print(compiled.s)

compiled.s = "testChild"
child()
print(compiled.s)
--- Expected output ---
test11|body 11
test12|body 11|body 12
test21|body 21
test22|body 22
test31|body 31
test32|body 31|body 32
test33|body 31|body 32|body 33
testChild|body base|body child
